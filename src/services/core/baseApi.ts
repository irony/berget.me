export interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export abstract class BaseAPI {
  protected async makeRequest(
    messages: ChatMessage[], 
    model: string, 
    useJsonMode: boolean = false,
    additionalOptions: any = {}
  ): Promise<string> {
    // Placeholder implementation - returnerar ett enkelt svar
    console.log('游댐 API-anrop simulerat:', { model, useJsonMode, messagesCount: messages.length });
    
    // Simulera API-svar baserat p친 det sista meddelandet
    const lastMessage = messages[messages.length - 1];
    if (lastMessage?.content) {
      if (useJsonMode) {
        return JSON.stringify({
          content: "Jag f칬rst친r vad du menar och reflekterar 칬ver det.",
          emotions: ["游뱂", "游눬"],
          emotionalState: "Fundersam"
        });
      } else {
        return "Tack f칬r att du delar det med mig. Jag lyssnar och f칬rst친r.";
      }
    }
    
    return "Hej! Hur m친r du idag?";
  }

  protected async makeStreamingRequest(
    messages: ChatMessage[], 
    model: string, 
    onChunk: (chunk: string) => void,
    useJsonMode: boolean = false,
    additionalOptions: any = {}
  ): Promise<{ content: string; tool_calls?: any[] }> {
    console.log('游댐 Streaming API-anrop simulerat:', { 
      model, 
      useJsonMode, 
      messagesCount: messages.length,
      hasTools: !!additionalOptions.tools
    });
    
    // Simulera streaming-svar
    const lastMessage = messages[messages.length - 1];
    let response = "Tack f칬r att du delar det med mig. Jag lyssnar och f칬rst친r.";
    
    if (lastMessage?.content) {
      if (lastMessage.content.toLowerCase().includes('heter')) {
        response = "L친t mig s칬ka i mitt minne efter ditt namn...";
      } else if (lastMessage.content.toLowerCase().includes('m친r')) {
        response = "Jag h칬r att du funderar p친 hur du m친r. Vill du ber칛tta mer?";
      } else if (lastMessage.content.toLowerCase().includes('tr칬tt')) {
        response = "Det l친ter som att du k칛nner dig tr칬tt. Har du haft en l친ng dag?";
      }
    }
    
    // Simulera streaming genom att skicka hela svaret p친 en g친ng
    onChunk(response);
    
    return {
      content: response,
      tool_calls: []
    };
  }

  protected logFullResponse(response: any, context: string) {
    console.log(`游댌 FULL ${context} RESPONSE:`, JSON.stringify(response, null, 2));
  }
}
